extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
date_vector <- dates %>% unlist
attributes(date_vector) <- attributes(dates[[1]])
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, fixed = fixed, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date(0)
parse_date("1970-01-01", fixed = FALSE)
parse_date("1970-01-01T01:01:01")
parse_date("1970-01-01T01:01:01Z")
parse_date <- function(x, tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%dT%H:%M:%OS", fixed = TRUE, align_left = TRUE, ...) {
# Class "methods"
parse_date_numeric <- function(x, tz, origin, ...) {
as.POSIXct(x, tz = tz, origin = origin, ...)
}
parse_date_character <- function(x, tz, format, fixed, align_left, ...) {
if (fixed) {
return(as.POSIXct(x, tz = tz, format = format, ...))
}
# Detect format seperators
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
strsplit(format_dividers)
# Parse each date
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
date_vector <- dates %>% unlist
attributes(date_vector) <- attributes(dates[[1]])
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, fixed = fixed, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01T01:01:01")
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01", fixed = FALSE)
as.numeric(parse_date("1970-01-01T00:00:00.99Z"))
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z")
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z", fixed = FALSE)
?POSIXct
parse_date("1970.01.01 00:00:00.99", format = "%Y.%m.%d %H:%M:%OS")
as.numeric(parse_date("1970.01.01 00:00:00.99", format = "%Y.%m.%d %H:%M:%OS"))
as.numeric(parse_date("1970.01.01 00:00:00.99", format = "%Y.%m.%d %H:%M:%OS"), fixed = FALSE)
as.numeric(parse_date("1970.01.01 00:00:00.99", format = "%Y.%m.%d %H:%M:%OS", fixed = FALSE))
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z", fixed = FALSE)
?as.POSIXct
?grep
parse_date("2010-02-18T16:23:48,3-06:00")
parse_date("2010-02-18T16:23:48,3-06:00", format = %Y.%m.%d %H:%M:%OS%z"")
parse_date("2010-02-18T16:23:48,3-06:00", format = %Y.%m.%d %H:%M:%OS%z")
parse_date("2010-02-18T16:23:48,3-06:00", format = "%Y.%m.%d %H:%M:%OS%z")
parse_date("2010-02-18T16:23:48,3-0600", format = "%Y.%m.%d %H:%M:%OS%z")
parse_date("2010-02-18T16:23:48.3-0600", format = "%Y.%m.%d %H:%M:%OS%z")
parse_date("2010-02-18T16:23:48,3-06:00", format = "%Y-%m-%dT%H:%M:%OS%z")
parse_date("2010-02-18T16:23:48,3-0600", format = "%Y-%m-%dT%H:%M:%OS%z")
parse_date("2010-02-18T16:23:48.3-0600", format = "%Y-%m-%dT%H:%M:%OS%z")
parse_date <- function(x, tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%dT%H:%M:%OS", fixed = TRUE, align_left = TRUE, ...) {
# Class "methods"
parse_date_numeric <- function(x, tz, origin, ...) {
as.POSIXct(x, tz = tz, origin = origin, ...)
}
parse_date_character <- function(x, tz, format, fixed, align_left, ...) {
if (fixed) {
return(as.POSIXct(x, tz = tz, format = format, ...))
}
# Detect format seperators
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
strsplit(format_dividers)
# Parse each date
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
date_vector <- dates %>% unlist
attributes(date_vector) <- attributes(dates[[1]])
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, fixed = fixed, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date(0)
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01", fixed = FALSE)
as.numeric(parse_date("1970-01-01T00:00:00.99Z"))
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z")
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z")
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z", fixed = FALSE)
parse_date("1970-01-01 10:00:00", format = "%Y-%m-%d %H:%M:%S%z", fixed = FALSE)
parse_date("1970-01-01 10:00", format = "%Y-%m-%d %H:%M:%S%z", fixed = FALSE)
parse_date("1970-01-01 10:00", format = "%Y-%m-%d %H:%M:%S%z", fixed = TRUE)
is_na_date <- date_vector %>% is.na
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
... = list()
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
date_vector <- x %>% as.POSIXct(tz = tz, format = format)
is_na_date <- date_vector %>% is.na
is_na_date
date_vector
?none
?all
parse_date <- function(x, tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%dT%H:%M:%OS", fixed = TRUE, align_left = TRUE, ...) {
# Class "methods"
parse_date_numeric <- function(x, tz, origin, ...) {
as.POSIXct(x, tz = tz, origin = origin, ...)
}
parse_date_character <- function(x, tz, format, fixed, align_left, ...) {
# Try first with fixed format
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
is_na <- date_vector %>% is.na
if (fixed || all(!is_na)) {
return(date_vector)
}
# Detect format seperators
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
subset(is_na) %>%
strsplit(format_dividers)
# Parse each date
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
date_vector[is_na] <- dates %>% unlist
attributes(date_vector) <- attributes(dates[[1]])
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, fixed = fixed, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date(0)
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01", fixed = FALSE)
as.POXIXct(c("1970"), tz = "UTC", format = "%Y")
as.POSIXct(c("1970"), tz = "UTC", format = "%Y")
as.POSIXct(c("1970", "1970"), tz = "UTC", format = "%Y")
x
x %>% as.POSIXct(tz = tz, format = format)
format
parse_date_character(x)
parse_date_character(x, tz, format = )
parse_date_character(x, tz, format)
parse_date_character(x, tz, format, fixed, align_left)
parse_date_character(x, tz, format, fixed = FALSE, align_left)
parse_date_character(x, tz, format, fixed = FALSE, align_left)
x
format
parse_date_character(x, tz, format, fixed = TRUE, align_left)
x
x %>% as.POSIXct(tz = tz, format = format)
date_vector <- x %>% as.POSIXct(tz = tz, format = format)
is_na <- date_vector %>% is.na
is_na
fixed
fixed
?fixed
date_vector <- x %>% as.POSIXct(tz = tz, format = format)
is_na <- date_vector %>% is.na
all(!is_na)
str(date_vector)
x %>%
subset(is_na)
x %>%
subset(is_na) %>%
strsplit(format_dividers)
parse_date <- function(x, tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%dT%H:%M:%OS", align_left = TRUE, ...) {
# Class "methods"
parse_date_numeric <- function(x, tz, origin, ...) {
as.POSIXct(x, tz = tz, origin = origin, ...)
}
parse_date_character <- function(x, tz, format, align_left, ...) {
# Try first with fixed format
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
is_na <- date_vector %>% is.na
if (all(!is_na)) {
return(date_vector)
}
# Detect format seperators
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
subset(is_na) %>%
strsplit(format_dividers)
# Parse each date
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
date_vector[is_na] <- dates %>% unlist
attributes(date_vector) <- attributes(dates[[1]])
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date(0)
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01")
x <- "1970-01-01"
tz
format
format = "%Y-%m-%dT%H:%M:%OS"
align_left = TRUE
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
... <- list()
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
date_vector <- x %>% as.POSIXct(tz = tz, format = format)
date_vector
as.POSIXct(x)
as.POSIXct(x, tz = tz, format = format)
format
x
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
is_na <- date_vector %>% is.na
all(!is_na)
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
subset(is_na) %>%
strsplit(format_dividers)
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
dates
dates %>% unlist
date_vector[is_na] <- dates %>% unlist
temp_date_vector <- dates %>% unlist
attributes(temp_date_vector) <- attributes(dates[[1]])
parse_date <- function(x, tz = "UTC", origin = "1970-01-01", format = "%Y-%m-%dT%H:%M:%OS", align_left = TRUE, ...) {
# Class "methods"
parse_date_numeric <- function(x, tz, origin, ...) {
as.POSIXct(x, tz = tz, origin = origin, ...)
}
parse_date_character <- function(x, tz, format, align_left, ...) {
# Try first with fixed format
date_vector <- x %>% as.POSIXct(tz = tz, format = format, ...)
is_na <- date_vector %>% is.na
if (all(!is_na)) {
return(date_vector)
}
# Detect format seperators
supported_formats <- c("%[a-zA-Z\\+]", "%OS") %>% paste(collapse = "|")
format_dividers <-
format %>%
strsplit(supported_formats) %>%
unlist %>%
subset(. != "") %>%
unique %>%
gsub("(.{1})", "\\\\\\1", .) %>%
paste(collapse = "|")
# Split format and dates into their component parts
split_format <-
format %>%
strsplit(format_dividers) %>%
unlist
split_x <-
x %>%
subset(is_na) %>%
strsplit(format_dividers)
# Parse each date
dates <-
split_x %>%
lapply(function(splits) {
n_splits <- splits %>% length
format_ind <-
if (align_left) {
seq(1, n_splits)
} else {
seq(length(split_format) - n_splits + 1, length(split_format))
}
format_string <-
split_format %>%
extract(format_ind) %>%
paste(collapse = "")
date <-
splits %>%
paste(collapse = "") %>%
as.POSIXct(tz = tz, format = format_string)
})
# Unlist dates, preserving attributes
new_date_vector <- dates %>% unlist
attributes(new_date_vector) <- attributes(dates[[1]])
date_vector[is_na] <- new_date_vector
return(date_vector)
}
# Call methods based on class
switch(class(x),
numeric = parse_date_numeric(x, tz = tz, origin = origin, ...),
character = parse_date_character(x, tz = tz, format = format, align_left = align_left, ...),
stop("Unsupported class.")
)
}
parse_date(0)
parse_date("1970-01-01T01:01:01Z")
parse_date("1970-01-01")
as.numeric(parse_date("1970-01-01T00:00:00.99Z"))
parse_date("1970-01-01 10:00:00-0130", format = "%Y-%m-%d %H:%M:%S%z")
as.numeric(parse_date("1970.01.01 00:00:00.99", format = "%Y.%m.%d %H:%M:%OS", fixed = FALSE))
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
?ifelse
edit(ifelse)
cbind(c(1,2,3), c(1,2))
?cbind
0.33 * 50 + 0.20 * 30
0.35 * 80
?match_names_to_ff_types
?fruitr::match_names_to_ff_types
dplyr::summarise?
?dplyr::summarise
?dplyr::mutate
transmute(df)
df
dplyr::transmute(df, xx = x + 1, xy = x + y)
dplyr::transmute(df, xx = x + 1, xy = x + y)
df
dplyr::transmute(x, xx = x + 1, xy = x + y)
x
dt
dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x + y)
dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x + y)
str(dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x + y))
dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x + z)
dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x %>% add(1))
dplyr::transmute(data.frame(x = 1, y = 2), xx = x + 1, xy = x %>% add(1))
vignette("nse")
library(cgdata)
convert_units(1)
convert_units(1, to = "m")
convert_units(1, from = "km", to = "m")
install.packages("maggritr")
